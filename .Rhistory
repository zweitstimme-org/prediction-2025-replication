width = 5,
bg = "white"
)
ggsave(
filename = "output/plots/figure_forecast_districts.tiff",
plot = district_map,
device = "tiff",
dpi = 300,
height = 5,
width = 5,
bg = "white"
)
### ----------------------------------------------------------
### Create Party Vote Share Forecast Visualization
### Authors: Lukas Stoetzer & Cornelius Erfort
### ----------------------------------------------------------
### 1. Load Data --------------------------------------------
# Load forecast data
forecast_party_vote <- readRDS("output/forecast_party_vote.rds")
font_family <- "'Segoe UI', -apple-system, sans-serif"
# Add value labels with one decimal
df_forecast <- df_forecast %>%
mutate(
value_label = round(value, 1),
value_label = ifelse(value_label %% 1 == 0, paste0(value_label, ".0"), as.character(value_label))
)
### ----------------------------------------------------------
### Create Party Vote Share Forecast Visualization
### Authors: Lukas Stoetzer & Cornelius Erfort
### ----------------------------------------------------------
### 1. Load Data --------------------------------------------
# Load forecast data
forecast_party_vote <- readRDS("output/forecast_party_vote.rds")
font_family <- "'Segoe UI', -apple-system, sans-serif"
# Add value labels with one decimal
df_forecast <- df_forecast %>%
mutate(
value_label = round(value, 1),
value_label = ifelse(value_label %% 1 == 0, paste0(value_label, ".0"), as.character(value_label))
)
### ----------------------------------------------------------
### Create Party Vote Share Forecast Visualization
### Authors: Lukas Stoetzer & Cornelius Erfort
### ----------------------------------------------------------
### 1. Load Data --------------------------------------------
# Load forecast data
forecast_party_vote <- readRDS("output/forecast_party_vote.rds")
font_family <- "'Segoe UI', -apple-system, sans-serif"
# Add value labels with one decimal
forecast_party_vote <- forecast_party_vote %>%
mutate(
value_label = round(value, 1),
value_label = ifelse(value_label %% 1 == 0, paste0(value_label, ".0"), as.character(value_label))
)
# Get the current date in German
current_date <-  Sys.Date()
# Manually translate to German
months <- c("Januar", "Februar", "MÃ¤rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember")
# Format date manually
formatted_date <- paste0(format(as.POSIXlt(current_date), "%d"), ". ",
months[as.POSIXlt(current_date)$mon + 1], " ",
format(as.POSIXlt(current_date), "%Y"))
forecast_party_vote$name <- factor(forecast_party_vote$name, levels = forecast_party_vote$name)
### 2. Create Main Forecast Plot ----------------------------
# Create visualization of party vote shares
ggplot_forecast <- forecast_party_vote %>%
mutate(
# Format value labels
value_label = round(value, 1),
value_label = ifelse(
value_label %% 1 == 0,
str_c(value_label, ".0"),
value_label
)
) %>%
ggplot(aes(x = reorder(name, -value),
y = value,
color = name,
fill = name)) +
# Add 5% threshold line
geom_hline(
yintercept = 5,
linetype = "dotted",
linewidth = .5,
color = "black"
) +
# Add confidence intervals
geom_linerange(
aes(ymin = low95, ymax = high95),
linewidth = 10,
alpha = 0.3,
position = position_dodge(width = .5)
) +
geom_linerange(
aes(ymin = low, ymax = high),
linewidth = 10,
alpha = 0.7,
position = position_dodge(width = .5)
) +
# Add points
geom_point(size = 6, color = "white", shape = 21, stroke = 2) +
geom_point(size = 2, fill = "white", shape = 21) +
# Add value labels
geom_text(
aes(label = value_label, y = value),
hjust = 2,
size = 3,
color = "black"
) +
# Set colors
scale_color_manual(
values = forecast_party_vote$color,
breaks = forecast_party_vote$name
) +
scale_fill_manual(
values = forecast_party_vote$color,
breaks = forecast_party_vote$name
) +
# Customize theme
theme_minimal() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
axis.text.x = element_text(size = 8, face = "bold", color = "black"),
axis.ticks.y = element_blank(),
axis.line.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
plot.margin = margin(10, 10, 10, 10)
) +
# Set labels
labs(x = NULL, y = "%")
### 3. Save Plots ------------------------------------------
# Create output directory if it doesn't exist
if (!dir.exists("output/plots")) {
dir.create("output/plots")
}
# Save as PDF
ggsave(
filename = "output/plots/figure_forecast_party_vote.pdf",
plot = ggplot_forecast,
height = 6,
width = 6 * 1.5
)
# Save as PNG
ggsave(
filename = "output/plots/figure_forecast_party_vote.png",
plot = ggplot_forecast,
device = "png",
dpi = 300,
height = 5,
width = 5 * 1.5,
bg = "white"
)
# Save as TIFF
ggsave(
filename = "output/plots/figure_forecast_party_vote.tiff",
plot = ggplot_forecast,
device = "tiff",
dpi = 300,
height = 5,
width = 5 * 1.5,
bg = "white"
)
# Load and filter federal polls
federal_polls <- read_csv("data/germany-federal-polls.csv") %>%
# Filter relevant parties
filter(party %in% c("cdu", "spd", "afd", "gru", "lin", "bsw", "fdp")) %>%
# Keep only polls in the week before election
filter(date >= electiondate - 7 & date < electiondate) %>%
# Calculate difference from actual results
mutate(diff = poll_share - vote_share)
# Calculate accuracy metrics by pollster
federal_polls_pollster <- federal_polls %>%
group_by(electiondate, auftraggeber) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
# Calculate overall accuracy metrics
federal_polls <- federal_polls %>%
group_by(electiondate) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
### 5. Generate Federal RMSE Plot ------------------------
# Calculate mean RMSE
mean_rmse <- mean(federal_polls$rmse, na.rm = TRUE)
# Define election years
election_years <- seq(1998, 2021, by = 4)
# Figure D.1: RMSE between last week poll mean and election results
ggplot(federal_polls, aes(x = electiondate, y = rmse)) +
geom_line() +
geom_point() +
geom_hline(yintercept = mean_rmse, linetype = "dashed", color = "grey") +
scale_x_date(
breaks = as.Date(paste0(election_years, "-09-01")),
labels = as.character(election_years)
) +
labs(
title = "RMSE over time for federal elections",
x = "Election date",
y = "RMSE"
) +
theme_minimal()
# Save plot
dir.create("plots", showWarnings = FALSE)
ggsave("output/plots/federal-rmse.pdf")
ggsave(
"output/plots/federal-rmse.tiff",
dpi = 300,
height = 5,
width = 5 * 1.5,
bg = "white"
)
### 6. Process State Poll Accuracy -----------------------
# Load state data
state_polls <- read_csv("data/germany-state-polls.csv")
state_election_results <- read_csv("data/germany-state-elections.csv")
# Add next election dates to polls
state_polls <- state_polls %>%
mutate(poll_date = as.Date(date))
# Find next election date for each poll
next_election_dates <- vector("list", length = nrow(state_polls))
for (i in 1:nrow(state_polls)) {
next_election_dates[[i]] <- state_election_results %>%
filter(
land == state_polls$land[i],
electiondate > state_polls$poll_date[i]
) %>%
summarise(next_election = min(electiondate)) %>%
pull(next_election)
}
# Process state polls
state_polls <- state_polls %>%
# Add election dates
mutate(electiondate = as.Date(unlist(next_election_dates))) %>%
# Merge with election results
left_join(state_election_results,
by = c("land", "party", "electiondate")) %>%
# Filter relevant parties and timeframe
filter(
party %in% c("cdu", "spd", "afd", "gru", "lin", "bsw", "fdp"),
poll_date >= electiondate - 7 & poll_date < electiondate
) %>%
# Calculate accuracy metrics
group_by(electiondate) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
### 7. Generate State RMSE Plot -------------------------
# Calculate mean RMSE
mean_rmse <- mean(state_polls$rmse, na.rm = TRUE)
# Figure D.2: RMSE between last week poll mean and election results
ggplot(state_polls, aes(x = electiondate, y = rmse)) +
geom_hline(yintercept = mean_rmse, linetype = "dashed", color = "grey") +
geom_line() +
geom_point() +
labs(
title = "RMSE over time for state elections",
x = "Election date",
y = "RMSE"
) +
theme_minimal()
# Save plot
ggsave("output/plots/state-rmse.pdf")
ggsave(
"output/plots/state-rmse.tiff",
dpi = 300,
height = 5,
width = 5 * 1.5,
bg = "white"
)
ggsave(
"output/plots/state-rmse.tiff",
dpi = 100,
height = 5,
width = 5 * 1.5,
bg = "white"
)
ggsave(
"output/plots/state-rmse.tiff",
dpi = 300,
height = 2,
width = 2 * 1.5,
bg = "white"
)
ggsave(
"output/plots/state-rmse.tiff",
dpi = 300,
height = 3,
width = 3 * 1.5,
bg = "white"
)
# Load and filter federal polls
federal_polls <- read_csv("data/germany-federal-polls.csv") %>%
# Filter relevant parties
filter(party %in% c("cdu", "spd", "afd", "gru", "lin", "bsw", "fdp")) %>%
# Keep only polls in the week before election
filter(date >= electiondate - 7 & date < electiondate) %>%
# Calculate difference from actual results
mutate(diff = poll_share - vote_share)
# Calculate accuracy metrics by pollster
federal_polls_pollster <- federal_polls %>%
group_by(electiondate, auftraggeber) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
# Calculate overall accuracy metrics
federal_polls <- federal_polls %>%
group_by(electiondate) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
### 5. Generate Federal RMSE Plot ------------------------
# Calculate mean RMSE
mean_rmse <- mean(federal_polls$rmse, na.rm = TRUE)
# Define election years
election_years <- seq(1998, 2021, by = 4)
# Figure D.1: RMSE between last week poll mean and election results
ggplot(federal_polls, aes(x = electiondate, y = rmse)) +
geom_line() +
geom_point() +
geom_hline(yintercept = mean_rmse, linetype = "dashed", color = "grey") +
scale_x_date(
breaks = as.Date(paste0(election_years, "-09-01")),
labels = as.character(election_years)
) +
labs(
title = "RMSE over time for federal elections",
x = "Election date",
y = "RMSE"
) +
theme_minimal()
# Save plot
dir.create("plots", showWarnings = FALSE)
ggsave("output/plots/federal-rmse.pdf")
ggsave(
"output/plots/federal-rmse.tiff",
dpi = 300,
height = 3,
width = 3 * 1.5,
bg = "white"
)
# Save as TIFF
ggsave(
filename = "output/plots/figure_forecast_party_vote.tiff",
plot = ggplot_forecast,
device = "tiff",
dpi = 300,
height = 3,
width = 3 * 1.5,
bg = "white"
)
# Save as TIFF
ggsave(
filename = "output/plots/figure_forecast_party_vote.tiff",
plot = ggplot_forecast,
device = "tiff",
dpi = 200,
height = 3,
width = 3 * 1.5,
bg = "white"
)
# Save as TIFF
ggsave(
filename = "output/plots/figure_forecast_party_vote.tiff",
plot = ggplot_forecast,
device = "tiff",
dpi = 200,
height = 4,
width = 4 * 1.5,
bg = "white"
)
ggsave(
filename = "output/plots/figure_forecast_districts.tiff",
plot = district_map,
device = "tiff",
dpi = 200,
height = 4,
width = 4,
bg = "white"
)
# Load historical candidate data
btw_candidates_1983_2025 <- read.csv2("data/btw_candidates_1983-2025.csv", stringsAsFactors = FALSE)
View(btw_candidates_1983_2025)
View(btw_candidates_1983_2025)
# Save as PDF
ggsave(
filename = "output/plots/figure_forecast_party_vote.pdf",
plot = ggplot_forecast,
height = 4,
width = 4 * 1.5
)
# Save as PNG
ggsave(
filename = "output/plots/figure_forecast_party_vote.png",
plot = ggplot_forecast,
device = "png",
dpi = 300,
height = 4,
width = 4 * 1.5,
bg = "white"
)
# Load and filter federal polls
federal_polls <- read_csv("data/germany-federal-polls.csv") %>%
# Filter relevant parties
filter(party %in% c("cdu", "spd", "afd", "gru", "lin", "bsw", "fdp")) %>%
# Keep only polls in the week before election
filter(date >= electiondate - 7 & date < electiondate) %>%
# Calculate difference from actual results
mutate(diff = poll_share - vote_share)
# Calculate accuracy metrics by pollster
federal_polls_pollster <- federal_polls %>%
group_by(electiondate, auftraggeber) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
# Calculate overall accuracy metrics
federal_polls <- federal_polls %>%
group_by(electiondate) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
### 5. Generate Federal RMSE Plot ------------------------
# Calculate mean RMSE
mean_rmse <- mean(federal_polls$rmse, na.rm = TRUE)
# Define election years
election_years <- seq(1998, 2021, by = 4)
# Figure D.1: RMSE between last week poll mean and election results
ggplot(federal_polls, aes(x = electiondate, y = rmse)) +
geom_line() +
geom_point() +
geom_hline(yintercept = mean_rmse, linetype = "dashed", color = "grey") +
scale_x_date(
breaks = as.Date(paste0(election_years, "-09-01")),
labels = as.character(election_years)
) +
labs(
title = "RMSE over time for federal elections",
x = "Election date",
y = "RMSE"
) +
theme_minimal()
# Save plot
dir.create("plots", showWarnings = FALSE)
ggsave("output/plots/federal-rmse.pdf",
dpi = 300,
height = 3,
width = 3 * 1.5,
bg = "white")
state_polls <- read_csv("data/germany-state-polls.csv")
state_election_results <- read_csv("data/germany-state-elections.csv")
# Add next election dates to polls
state_polls <- state_polls %>%
mutate(poll_date = as.Date(date))
# Find next election date for each poll
next_election_dates <- vector("list", length = nrow(state_polls))
for (i in 1:nrow(state_polls)) {
next_election_dates[[i]] <- state_election_results %>%
filter(
land == state_polls$land[i],
electiondate > state_polls$poll_date[i]
) %>%
summarise(next_election = min(electiondate)) %>%
pull(next_election)
}
# Process state polls
state_polls <- state_polls %>%
# Add election dates
mutate(electiondate = as.Date(unlist(next_election_dates))) %>%
# Merge with election results
left_join(state_election_results,
by = c("land", "party", "electiondate")) %>%
# Filter relevant parties and timeframe
filter(
party %in% c("cdu", "spd", "afd", "gru", "lin", "bsw", "fdp"),
poll_date >= electiondate - 7 & poll_date < electiondate
) %>%
# Calculate accuracy metrics
group_by(electiondate) %>%
summarise(
mse = mean((poll_share - vote_share)^2, na.rm = T),
rmse = sqrt(mean((poll_share - vote_share)^2, na.rm = T))
)
### 7. Generate State RMSE Plot -------------------------
# Calculate mean RMSE
mean_rmse <- mean(state_polls$rmse, na.rm = TRUE)
# Figure D.2: RMSE between last week poll mean and election results
ggplot(state_polls, aes(x = electiondate, y = rmse)) +
geom_hline(yintercept = mean_rmse, linetype = "dashed", color = "grey") +
geom_line() +
geom_point() +
labs(
title = "RMSE over time for state elections",
x = "Election date",
y = "RMSE"
) +
theme_minimal()
# Save plot
ggsave("output/plots/state-rmse.pdf",
dpi = 300,
height = 3,
width = 3 * 1.5,
bg = "white")
